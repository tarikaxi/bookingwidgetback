package ma.bookinwidget.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PayementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPayementAllPropertiesEquals(Payement expected, Payement actual) {
        assertPayementAutoGeneratedPropertiesEquals(expected, actual);
        assertPayementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPayementAllUpdatablePropertiesEquals(Payement expected, Payement actual) {
        assertPayementUpdatableFieldsEquals(expected, actual);
        assertPayementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPayementAutoGeneratedPropertiesEquals(Payement expected, Payement actual) {
        assertThat(expected)
            .as("Verify Payement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPayementUpdatableFieldsEquals(Payement expected, Payement actual) {
        assertThat(expected)
            .as("Verify Payement relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPayementType()).as("check payementType").isEqualTo(actual.getPayementType()))
            .satisfies(e -> assertThat(e.getCardNum()).as("check cardNum").isEqualTo(actual.getCardNum()))
            .satisfies(e -> assertThat(e.getExpiration()).as("check expiration").isEqualTo(actual.getExpiration()))
            .satisfies(e -> assertThat(e.getCryptogram()).as("check cryptogram").isEqualTo(actual.getCryptogram()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPayementUpdatableRelationshipsEquals(Payement expected, Payement actual) {
        // empty method
    }
}
