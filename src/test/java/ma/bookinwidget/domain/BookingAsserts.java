package ma.bookinwidget.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BookingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingAllPropertiesEquals(Booking expected, Booking actual) {
        assertBookingAutoGeneratedPropertiesEquals(expected, actual);
        assertBookingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingAllUpdatablePropertiesEquals(Booking expected, Booking actual) {
        assertBookingUpdatableFieldsEquals(expected, actual);
        assertBookingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingAutoGeneratedPropertiesEquals(Booking expected, Booking actual) {
        assertThat(expected)
            .as("Verify Booking auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingUpdatableFieldsEquals(Booking expected, Booking actual) {
        assertThat(expected)
            .as("Verify Booking relevant properties")
            .satisfies(e -> assertThat(e.getClientFirstName()).as("check clientFirstName").isEqualTo(actual.getClientFirstName()))
            .satisfies(e -> assertThat(e.getClientLastName()).as("check clientLastName").isEqualTo(actual.getClientLastName()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getRooms()).as("check rooms").isEqualTo(actual.getRooms()))
            .satisfies(e -> assertThat(e.getRef()).as("check ref").isEqualTo(actual.getRef()))
            .satisfies(e -> assertThat(e.getClientEmail()).as("check clientEmail").isEqualTo(actual.getClientEmail()))
            .satisfies(e -> assertThat(e.getClientPhone()).as("check clientPhone").isEqualTo(actual.getClientPhone()))
            .satisfies(e -> assertThat(e.getAdultNumber()).as("check adultNumber").isEqualTo(actual.getAdultNumber()))
            .satisfies(e -> assertThat(e.getChildNumber()).as("check childNumber").isEqualTo(actual.getChildNumber()))
            .satisfies(e -> assertThat(e.getIsconfirmed()).as("check isconfirmed").isEqualTo(actual.getIsconfirmed()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingUpdatableRelationshipsEquals(Booking expected, Booking actual) {
        // empty method
    }
}
